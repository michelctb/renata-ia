
import React, { useEffect, useState } from 'react';
import { z } from 'zod';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Cliente } from '@/lib/clientes';
import { 
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Switch } from '@/components/ui/switch';
import { 
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover';
import { Check, ChevronsUpDown } from 'lucide-react';
import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem } from '@/components/ui/command';
import { cn } from '@/lib/utils';

// Country codes with flags for phone numbers
const countries = [
  { code: '55', label: 'Brasil', flag: '🇧🇷' },
  { code: '1', label: 'Estados Unidos', flag: '🇺🇸' },
  { code: '351', label: 'Portugal', flag: '🇵🇹' },
  { code: '34', label: 'Espanha', flag: '🇪🇸' },
  { code: '54', label: 'Argentina', flag: '🇦🇷' },
  { code: '598', label: 'Uruguai', flag: '🇺🇾' },
  { code: '44', label: 'Reino Unido', flag: '🇬🇧' },
  { code: '49', label: 'Alemanha', flag: '🇩🇪' },
  { code: '33', label: 'França', flag: '🇫🇷' },
  { code: '39', label: 'Itália', flag: '🇮🇹' },
];

const userFormSchema = z.object({
  nome: z.string().min(1, 'Nome é obrigatório'),
  countryCode: z.string().default('55'),
  phoneNumber: z.string().min(8, 'Número de telefone inválido'),
  email: z.string().email('E-mail inválido').optional().nullable(),
  cpf: z.string().min(11, 'CPF inválido').max(14).optional().nullable(),
  ativo: z.boolean().default(true),
  plano: z.string().optional().nullable(),
  perfil: z.union([z.enum(['user', 'adm', 'consultor']), z.string()]).default('user'),
});

type UserFormValues = z.infer<typeof userFormSchema>;

interface UserManagementDialogProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (user: Cliente) => void;
  userToEdit: Cliente | null;
  isAdminMode: boolean;
}

const UserManagementDialog: React.FC<UserManagementDialogProps> = ({
  isOpen,
  onClose,
  onSave,
  userToEdit,
  isAdminMode,
}) => {
  const [open, setOpen] = useState(false);
  
  const form = useForm<UserFormValues>({
    resolver: zodResolver(userFormSchema),
    defaultValues: {
      nome: '',
      countryCode: '55',
      phoneNumber: '',
      email: '',
      cpf: '',
      ativo: true,
      plano: 'Mensal',
      perfil: 'user',
    },
  });

  // Parse phone number to separate country code and number when editing
  const parsePhoneNumber = (phone: string | undefined) => {
    if (!phone) return { countryCode: '55', phoneNumber: '' };
    
    // Check if it's in WhatsApp format
    if (phone.includes('@s.whatsapp.net')) {
      phone = phone.split('@')[0];
    }
    
    // Try to extract country code
    for (const country of countries) {
      if (phone.startsWith(country.code)) {
        return {
          countryCode: country.code,
          phoneNumber: phone.substring(country.code.length)
        };
      }
    }
    
    // Default if no country code is found
    return { countryCode: '55', phoneNumber: phone };
  };

  // Atualizar o formulário quando userToEdit mudar
  useEffect(() => {
    if (userToEdit) {
      const { countryCode, phoneNumber } = parsePhoneNumber(userToEdit.telefone);
      
      form.reset({
        nome: userToEdit.nome || '',
        countryCode,
        phoneNumber,
        email: userToEdit.email || '',
        cpf: userToEdit.cpf ? String(userToEdit.cpf) : '',
        ativo: userToEdit.ativo !== undefined ? userToEdit.ativo : true,
        plano: userToEdit.plano || 'Mensal',
        perfil: userToEdit.perfil || 'user',
      });
    } else {
      form.reset({
        nome: '',
        countryCode: '55',
        phoneNumber: '',
        email: '',
        cpf: '',
        ativo: true,
        plano: 'Mensal',
        perfil: 'user',
      });
    }
  }, [userToEdit, form]);

  const onSubmit = (values: UserFormValues) => {
    // Format phone number for WhatsApp
    const telefone = `${values.countryCode}${values.phoneNumber}@s.whatsapp.net`;
    
    // Format CPF as number if provided
    const cpf = values.cpf ? Number(values.cpf.replace(/\D/g, '')) : null;
    
    // Prepare user data for saving
    const userData: Cliente = {
      ...userToEdit,
      id_cliente: userToEdit?.id_cliente || '', // ID will be generated by Supabase if not present
      nome: values.nome,
      telefone,
      email: values.email || null,
      cpf,
      ativo: values.ativo,
      plano: values.plano || null,
      perfil: values.perfil,
    };
    
    onSave(userData);
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[500px]">
        <DialogHeader>
          <DialogTitle>
            {userToEdit ? 'Editar Usuário' : 'Adicionar Novo Usuário'}
          </DialogTitle>
        </DialogHeader>
        
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <FormField
              control={form.control}
              name="nome"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Nome</FormLabel>
                  <FormControl>
                    <Input placeholder="Nome completo" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            
            <div className="grid grid-cols-3 gap-4">
              <FormField
                control={form.control}
                name="countryCode"
                render={({ field }) => (
                  <FormItem className="flex flex-col">
                    <FormLabel>País</FormLabel>
                    <Popover open={open} onOpenChange={setOpen}>
                      <PopoverTrigger asChild>
                        <FormControl>
                          <Button
                            variant="outline"
                            role="combobox"
                            className={cn(
                              "w-full justify-between",
                              !field.value && "text-muted-foreground"
                            )}
                          >
                            {field.value
                              ? countries.find((country) => country.code === field.value)?.flag + " +" + field.value
                              : "Selecione um país"}
                            <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                          </Button>
                        </FormControl>
                      </PopoverTrigger>
                      <PopoverContent className="w-[200px] p-0">
                        <Command>
                          <CommandInput placeholder="Buscar país..." />
                          <CommandEmpty>Nenhum país encontrado.</CommandEmpty>
                          <CommandGroup>
                            {countries.map((country) => (
                              <CommandItem
                                key={country.code}
                                value={country.code}
                                onSelect={() => {
                                  form.setValue("countryCode", country.code);
                                  setOpen(false);
                                }}
                              >
                                <Check
                                  className={cn(
                                    "mr-2 h-4 w-4",
                                    country.code === field.value
                                      ? "opacity-100"
                                      : "opacity-0"
                                  )}
                                />
                                {country.flag} {country.label} (+{country.code})
                              </CommandItem>
                            ))}
                          </CommandGroup>
                        </Command>
                      </PopoverContent>
                    </Popover>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="phoneNumber"
                render={({ field }) => (
                  <FormItem className="col-span-2">
                    <FormLabel>Telefone</FormLabel>
                    <FormControl>
                      <Input placeholder="99999-9999" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
            
            <div className="grid grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>E-mail</FormLabel>
                    <FormControl>
                      <Input 
                        placeholder="email@exemplo.com" 
                        type="email" 
                        {...field} 
                        value={field.value || ''}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="cpf"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>CPF</FormLabel>
                    <FormControl>
                      <Input 
                        placeholder="000.000.000-00" 
                        {...field} 
                        value={field.value || ''}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
            
            <div className="grid grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="plano"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Plano</FormLabel>
                    <Select 
                      onValueChange={field.onChange} 
                      defaultValue={field.value || 'Mensal'}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Selecione um plano" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="Mensal">Mensal</SelectItem>
                        <SelectItem value="Semestral">Semestral</SelectItem>
                        <SelectItem value="Anual">Anual</SelectItem>
                        <SelectItem value="Consultor">Consultor</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              {isAdminMode && (
                <FormField
                  control={form.control}
                  name="perfil"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Perfil</FormLabel>
                      <Select 
                        onValueChange={field.onChange} 
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Selecione um perfil" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="user">Usuário</SelectItem>
                          <SelectItem value="consultor">Consultor</SelectItem>
                          <SelectItem value="adm">Administrador</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              )}
            </div>
            
            <FormField
              control={form.control}
              name="ativo"
              render={({ field }) => (
                <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3">
                  <div className="space-y-0.5">
                    <FormLabel>Status da Conta</FormLabel>
                  </div>
                  <FormControl>
                    <Switch
                      checked={field.value}
                      onCheckedChange={field.onChange}
                    />
                  </FormControl>
                </FormItem>
              )}
            />
            
            <DialogFooter className="pt-4">
              <Button
                type="button"
                variant="outline"
                onClick={onClose}
              >
                Cancelar
              </Button>
              <Button type="submit">
                {userToEdit ? 'Atualizar' : 'Adicionar'} Usuário
              </Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
};

export default UserManagementDialog;
