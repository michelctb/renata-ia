
import { supabase } from '@/integrations/supabase/client';

// Table name
export const LEMBRETES_TABLE = 'Lembretes';

// Types for lembretes records
export type Lembrete = {
  id?: number; // Auto-generated by the system
  lembrete: string; // Filled by user in form
  tipo: string; // Filled by user in form
  valor?: number; // Filled by user in form
  telefone?: string; // Phone number from Clientes.telefone
  cliente?: string; // Name from Clientes.nome
  id_cliente?: string; // Auto-generated by the system
  vencimento: string; // Filled by user in form
  lembrar: string; // Same as vencimento
};

// Fetch lembretes for a specific user
export async function fetchLembretes(userId: string) {
  console.log('Fetching lembretes for user:', userId);
  
  const { data, error } = await supabase
    .from(LEMBRETES_TABLE)
    .select('*')
    .eq('id_cliente', userId)
    .order('vencimento', { ascending: true });

  if (error) {
    console.error('Error fetching lembretes:', error);
    throw error;
  }

  console.log('Lembretes fetched:', data?.length || 0);
  return data || [];
}

// Add a new lembrete
export async function addLembrete(lembrete: Lembrete) {
  console.log('Adding lembrete:', lembrete);
  
  // Create a lembrete object without the ID field
  // id and id_cliente will be set by the database
  const { id, id_cliente, ...lembreteDataForInsert } = lembrete;
  console.log('Submitting lembrete data:', lembreteDataForInsert);
  
  try {
    const { data: insertedData, error } = await supabase
      .from(LEMBRETES_TABLE)
      .insert([lembreteDataForInsert])
      .select();

    if (error) {
      console.error('Error adding lembrete:', error);
      throw error;
    }

    console.log('Lembrete added successfully:', insertedData?.[0]);
    return insertedData?.[0];
  } catch (err) {
    console.error('Exception adding lembrete:', err);
    throw err;
  }
}

// Update an existing lembrete
export async function updateLembrete(lembrete: Lembrete) {
  console.log('Updating lembrete:', lembrete);
  
  if (!lembrete.id) {
    console.error('Error: lembrete id is required for update');
    throw new Error('Lembrete ID is required for update');
  }
  
  const id = lembrete.id;
  
  console.log('Using ID for update:', id);
  
  // Remove id and id_cliente from the update payload since they're managed by the database
  const { id: _, id_cliente, ...updateData } = lembrete;
  
  try {
    const { data, error } = await supabase
      .from(LEMBRETES_TABLE)
      .update(updateData)
      .eq('id', id)
      .select();

    if (error) {
      console.error('Error updating lembrete:', error);
      throw error;
    }

    console.log('Lembrete updated successfully:', data?.[0]);
    return data?.[0];
  } catch (err) {
    console.error('Exception updating lembrete:', err);
    throw err;
  }
}

// Delete a lembrete
export async function deleteLembrete(id: number) {
  console.log('Deleting lembrete:', id);
  
  const { error } = await supabase
    .from(LEMBRETES_TABLE)
    .delete()
    .eq('id', id);

  if (error) {
    console.error('Error deleting lembrete:', error);
    throw error;
  }

  console.log('Lembrete deleted successfully');
  return true;
}
